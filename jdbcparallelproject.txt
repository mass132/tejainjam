package com.java.parallelDAO;
	import java.util.Date;
	import java.util.HashMap;
	import java.util.Iterator;
	import java.util.Map;
	import java.util.Random;
import com.java.parallelBean.Bean;
import com.java.parallelBean.TransBean;

import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.sql.SQLException;
	import java.sql.Statement;
	import java.sql.Timestamp;
	import java.text.*;
	public class DaoClass implements DAOI {
		private static final long amountrecieved = 0;
		private static final long accountnumber = 0;
		private static final String Transtype = null;
		PreparedStatement ps = null;
		Connection conn = null;
		static Random rand = new Random();
		 HashMap<String, Bean> UserAccountData;
		 public DaoClass() {
			 UserAccountData = new HashMap<String, Bean>();
			}	
		Bean a1; // Object of Userbean class.
		SimpleDateFormat sd = new SimpleDateFormat("dd/MM/yyyy");
		SimpleDateFormat sd1 = new SimpleDateFormat("HH:mm:ss");
		private String transdate;

		
		public int generateRandomTrnasactionID() {
			int n = rand.nextInt(100);
			return n;
		}
		//this method create user account and data in map collection.
		public long service1(Bean b) {
			// TODO Auto-generated method stub
			String dob = b.getDob();
			String Name = b.getName();
			String Password = b.getPassword();
			long mobileNumber = b.getPhoneno();
			long balance = b.getBal();
			
			try {
				conn = DaoDatabaseConnection.getConnection();
				String insert_str = "insert into bank values(?,?,?,?,?)";
				
				ps = conn.prepareStatement(insert_str);			
				ps.setNString(1, Name);
				ps.setString(2,dob);
				ps.setString(3, Password);
				ps.setLong(4,mobileNumber);
				ps.setLong(5,balance);
				
				int updateCount = ps.executeUpdate();
				//System.out.println(updateCount);
				conn.close();
				return updateCount;
			}
			catch(Exception ex) {
				System.out.println(ex.getMessage());
				System.out.println(ex.getStackTrace());
				return 0;
			}
			
		}
		
		//this method return balance .
		public long showbalance1(long bacc,String password1) {
			
			try {
				conn = DaoDatabaseConnection.getConnection();
				String show_str = "select balance from bank where accountid = ?";
				ps = conn.prepareStatement(show_str);	
				ps.setLong(1,bacc);
				ResultSet resultSet = ps.executeQuery();			
				resultSet.next();
				long balance = resultSet.getLong("balance");
				return bacc;

			}
			catch(Exception e) {
				System.out.println(e);
				System.out.println(e.getStackTrace());
				return 0;
			}
			

		}
		
		//this method use for deposit amount. 
		
		public  long deposit(long account2, String password2, long dep1) {

			try {
				conn = DaoDatabaseConnection.getConnection();
				String dep_str = "update bank set balance = balance + ? where accountid = ?";
				
				ps = conn.prepareStatement(dep_str);
				
				ps.setLong(1, account2);
				ps.setString(2, password2);
				
				int i = ps.executeUpdate();
				
				String insert_transaction = "insert into transaction(tid,transactiontype,transactiondate,amount,accountid) values(?,?,?,?,?)";
				
				ps = conn.prepareStatement(insert_transaction);
				
				int tid = generateRandomTrnasactionID();
				ps.setInt(1,tid);
				ps.setLong(2,dep1);
				ps.setTimestamp(3, java.sql.Timestamp.valueOf(java.time.LocalDateTime.now()));
				ps.setLong(4, account2);
				ps.setString(5, password2);			
				int j = ps.executeUpdate();
				//conn.close();
				return j;	}
			catch(Exception e){
				System.out.println("error");
				System.out.println(e.getStackTrace());
				return 0;
			}
		}
		
		//this method use for withdraw amount.
		public long withdraw1(long account3, String password3, long wit1) {
			
			try {
				conn = DaoDatabaseConnection.getConnection();
				String dep_str = "update bank set balance = balance - ? where accountid = ?";
				
				ps = conn.prepareStatement(dep_str);
				
				ps.setLong(1, account3);
				ps.setString(2, password3);
				ps.setLong(3, wit1);
				int i = ps.executeUpdate();
				String insert_transaction = "insert into transaction(tid,transactiontype,transactiondate,amount,accountid) values(?,?,?,?,?)";
				ps = conn.prepareStatement(insert_transaction);
				
				long transid = generateRandomTrnasactionID();
				ps.setLong(1,transid);
				ps.setTimestamp(2, java.sql.Timestamp.valueOf(java.time.LocalDateTime.now()));
				ps.setLong(3, account3);
				ps.setString(4, password3);
				ps.setLong(5, wit1);
				
				long j = ps.executeUpdate();
				
				//conn.close();
				return j;
			}
			catch(Exception e)
		{
				System.out.println("Error");
				System.out.println(e.getStackTrace());
				return 0;
			}
		}
		public long fund1(long account4,  long account5,String password4,long f1) {
			
				try {
					String fund_trnsf = "update bank set balance = balance - ? where accountid = ?";
					ps = conn.prepareStatement(fund_trnsf);
					ps.setLong(1, account4);
					ps.setLong(2,account5);
					ps.setString(3, password4);
					ps.setLong(4, f1);
					int i = ps.executeUpdate();				
					String fund_trnsf2 = "update bank set balance = balance + ? where accountid = ?";
					ps = conn.prepareStatement(fund_trnsf2);
					ps.setLong(1,account4);
					ps.setLong(2, account5);
					ps.setString(3,password4);				
					int j = ps.executeUpdate();				
					String insert_transaction = "insert into transaction(tid,transactiontype,toaccountid,transactiondate,amount,accountid) values(?,?,?,?,?,?)";	
					ps = conn.prepareStatement(insert_transaction);				
					Long transid = (long) generateRandomTrnasactionID();
					ps.setLong(1,transid);
					ps.setString(2,"Fund Transfer");
					ps.setLong(3, account5);
					ps.setTimestamp(4, java.sql.Timestamp.valueOf(java.time.LocalDateTime.now()));
					ps.setLong(5, f1);
					ps.setLong(6, account4);
					int i2 = ps.executeUpdate();
					String insert_transaction2 = "insert into transaction(tid,transactiontype,toaccountid,transactiondate,amount,accountid) values(?,?,?,?,?,?)";	
					ps = conn.prepareStatement(insert_transaction2);	
					int tid2 = generateRandomTrnasactionID();
					ps.setInt(1,tid2);
					ps.setString(2,"Fund Transfer");
					ps.setLong(3, account4);
					ps.setTimestamp(4, java.sql.Timestamp.valueOf(java.time.LocalDateTime.now()));
					ps.setLong(5, f1);
					ps.setLong(6, account5);			
					long j2 = ps.executeUpdate();
					return j2;
				}
				catch(Exception e){
					System.out.println("Error");
					System.out.println(e.getMessage());
					return 0;
				}	
		}	
		//this method print the all transaction of logged in user.
		public HashMap<Integer,TransBean> printTransactions(long accountId){
			//a1 = UserAccountData.get(accountId);
			HashMap<Integer,TransBean> hm = new HashMap<Integer,TransBean>();
			
			//System.out.println(a1.getTransaction());
			try {				
				String print_transaction = "select * from transaction where accountid = ?";
				ps = conn.prepareStatement(print_transaction);
				ps.setLong(1, accountId);
				
				ResultSet rs = ps.executeQuery();	
				while(rs.next()) {
					TransBean tb = new TransBean();
					long transid = rs.getLong(transid);
					String TransType = rs.getString("transactiontype");
					long accountnumber = rs.getLong(accountnumber);
					Timestamp getDate = rs.getTimestamp("transactiondate");
					long amount = rs.getInt("amount");
					String accountId1 = rs.getString("accountId");		
					tb.setTransid(transid);
					tb.setTranstype(Transtype);
					tb.setAccountnumber(accountnumber););
					tb.setAmount(amount);
					tb.setAmountrecieved(amountrecieved);
					tb.setTransdate(transdate);
					
					hm.put((long) transid, tb);
				}
				//conn.close();
				return  hm;
			
			}
			catch(Exception e) {
				System.out.println("this error i got "+e.getMessage());
				return  hm;
			}
		}

		//this method check account id is in collection or not.
		public boolean validAccountId(String accountId) {
			try {
				conn = DaoDatabaseConnection.getConnection();
				String val_str = "select * from bank where accountid = ?";			
				ps = conn.prepareStatement(val_str);			
				ps.setString(1,accountId);				
				ResultSet rs = ps.executeQuery();		
				if(rs.next()) {
					return true;
				}			
				//conn.close();
				return false;			
			}
			catch(Exception e) {
				System.out.println(e);
				System.out.println(e.getMessage());
				return false;
			}
		}	
		//this method check user have insufficient balance or not.
		public boolean checkBalance(String accountId, int amount) {
			try {
				conn = DaoDatabaseConnection.getConnection();
				String chk_str = "select balance from bank where accountid = ? and balance >= ?";
				
				ps = conn.prepareStatement(chk_str);
				
				ps.setString(1, accountId);
				ps.setInt(2, amount);
				
				ResultSet resultSet = ps.executeQuery();
				if(resultSet.next()) {
					return true;
				}
				
				//conn.close();
				return false;
			}
			catch(Exception e){
				System.out.println(e);
				System.out.println(e.getMessage());
				return false;
			}
		}
		@Override
		public long showbalance(long bacc2, String password1) {
			// TODO Auto-generated method stub
			return 0;
		}
		@Override
		public long deposit1(long account2, String password2, long dep1) {
			// TODO Auto-generated method stub
			return 0;
		}
		@Override
		public long withdraw(long account3, String password3, long w1) {
			// TODO Auto-generated method stub
			return 0;
		}
		@Override
		public long fund(long account4, long account5, String password4, long f1) {
			// TODO Auto-generated method stub
			return 0;
		}
		@Override
		public boolean validation(long account4, String password4) {
			// TODO Auto-generated method stub
			return false;
		}
		@Override
		public boolean validation1(long account4, String password4, long account5) {
			// TODO Auto-generated method stub
			return false;
		}
	}
